{
  "active": false,
  "connections": {
    "Showings": {
      "main": [
        [
          {
            "node": "Extract Showings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Showings": {
      "main": [
        [
          {
            "node": "Parse Showings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Showings": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-05T15:43:39.671Z",
  "id": "VqgVoU9FK4SJfWUT",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Single Family Showings Data",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "rep-showings",
          "readStatus": "unread"
        },
        "options": {
          "dataPropertyAttachmentsPrefixName": "showings_",
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -380,
        -80
      ],
      "id": "ceae25e0-1220-4eed-ae45-7a37d4b6a95d",
      "name": "Showings",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.item.json.data;\nif (!raw) throw new Error(\"No showings data found.\");\n\nconst lines = raw.split('\\n').filter(l => l.trim());\nconst headers = lines[0].split(',').map(h => h.trim());\nconst data = lines.slice(1);\n\nconst counts = {};\n\nfor (const line of data) {\n  const fields = line.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/).map(v => v.replace(/^\"|\"$/g, '').trim());\n  const entry = Object.fromEntries(headers.map((h, i) => [h, fields[i]]));\n\n  const status = entry[\"Status\"];\n  const propId = parseInt(entry[\"Property ID\"]);\n  if (isNaN(propId)) continue;\n\n  if (!counts[propId]) {\n    counts[propId] = { showings_completed: 0, showings_canceled: 0 };\n  }\n\n  if (status === \"Completed\") {\n    counts[propId].showings_completed++;\n  } else if (status === \"Prospect Canceled\") {\n    counts[propId].showings_canceled++;\n  }\n}\n\nreturn Object.entries(counts).map(([property_id, { showings_completed, showings_canceled }]) => ({\n  json: {\n    property_id: parseInt(property_id),\n    showings_completed,\n    showings_canceled\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -80
      ],
      "id": "224fd07e-5036-41d0-9f83-bb0b5213e1b2",
      "name": "Parse Showings"
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "showings_0",
        "options": {
          "keepSource": "both"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -160,
        -80
      ],
      "id": "b597e909-78de-4be8-a2df-50c21af05fb3",
      "name": "Extract Showings"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO owner_marketing_summary (\n  property_id,\n  week_ending,\n  showings,\n  showings_canceled,\n  created_at,\n  updated_at\n)\nVALUES (\n  {{ $json.property_id }},\n  DATE_SUB(CURDATE(), INTERVAL 1 DAY),\n  {{ $json.showings_completed }},\n  {{ $json.showings_canceled }},\n  NOW(),\n  NOW()\n)\nON DUPLICATE KEY UPDATE\n  showings = VALUES(showings),\n  showings_canceled = VALUES(showings_canceled),\n  updated_at = NOW();\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        300,
        -80
      ],
      "id": "40776163-02d2-48fd-aab8-133341404c6b",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-04-05T16:04:10.000Z",
  "versionId": "14b3c05f-9d9f-4e6c-9826-bbf9abf8f87b"
}