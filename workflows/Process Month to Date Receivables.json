{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "FTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FTP": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "MySQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "FTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-18T03:11:15.513Z",
  "id": "82u5fp3IjDa713il",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Process Month to Date Receivables",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1560,
        -280
      ],
      "id": "2d9df5be-60f4-496b-b6c1-325a50bb8091",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "path": "/public_html/data/monthly_receivables.csv"
      },
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -1380,
        -20
      ],
      "id": "0979d722-2ac5-4d7a-91a7-6e62fa9de897",
      "name": "FTP",
      "credentials": {
        "ftp": {
          "id": "87ZwJT7N7b5rycj4",
          "name": "n8n Data FTP account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1160,
        -20
      ],
      "id": "43b46893-b710-42ac-9ab7-46f4ed92e7e5",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// 1) Get data from input\nlet allItems = $input.all();\n\n// Try the most common scenario: allItems[0].json is already an array\nlet rows = allItems[0].json;\n\nif (!Array.isArray(rows)) {\n  // Maybe it's in allItems[0].json.data?\n  if (allItems[0].json.data && Array.isArray(allItems[0].json.data)) {\n    rows = allItems[0].json.data;\n  } else {\n    // Maybe each item is a single row:\n    rows = allItems.map(item => item.json).flat();\n  }\n}\n\n// If it's still not an array, throw an error\nif (!Array.isArray(rows)) {\n  throw new Error(\"We couldn’t find an array in the expected paths. Please check the output of the previous node.\");\n}\n\n// 2) Initialize receipts map\nconst receiptsMap = {};\n\n// 3) Loop through each row to sum receipts\nrows.forEach(row => {\n  if (!row.hasOwnProperty(\"Property ID\")) return;\n\n  // Normalize the property ID\n  const propertyId = String(row[\"Property ID\"]).trim();\n  if (!propertyId) return;\n\n  // Parse the receipt amount\n  const amount = parseFloat(row[\"Receipt Amount\"] || 0);\n\n  // Initialize if needed\n  if (!receiptsMap[propertyId]) {\n    receiptsMap[propertyId] = 0;\n  }\n\n  // Add to the property's total\n  receiptsMap[propertyId] += amount;\n});\n\n// 4) Build the output array\nconst output = Object.keys(receiptsMap).map(propertyId => {\n  return {\n    \"Property ID\": propertyId,\n    \"Total Receipts\": receiptsMap[propertyId],\n  };\n});\n\n// 5) Return final receipts results\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        -20
      ],
      "id": "4369d787-27c4-4186-bc13-92efa1269de0",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT `Property ID`, `Property`\nFROM `property_directory`\nWHERE `Property ID` IN ({{ $json[\"Property ID\"] }})\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -800,
        -20
      ],
      "id": "d1258eee-9632-450b-aaca-8c1e7a3dfb9d",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24d0196e-6f74-4a98-8c5e-c8a3d124a940",
              "name": "Property ID",
              "value": "={{ $json['Property ID'] }}",
              "type": "string"
            },
            {
              "id": "76184067-9033-4b2d-a872-7e3b5cd381f2",
              "name": "Property",
              "value": "={{ $json.Property }}",
              "type": "string"
            },
            {
              "id": "c94d6792-91f2-4e1f-83eb-01f6bebe464e",
              "name": "Property ID",
              "value": "={{ $('Code').item.json['Property ID'] }}",
              "type": "string"
            },
            {
              "id": "397e6660-377e-409a-b25f-07f76bea7627",
              "name": "Total Units",
              "value": "={{ $('Code').item.json['Total Units'] }}",
              "type": "number"
            },
            {
              "id": "45dd41be-e4a4-47e4-85b3-854eed905b54",
              "name": "Occupied Units",
              "value": "={{ $('Code').item.json['Occupied Units'] }}",
              "type": "number"
            },
            {
              "id": "350b54b8-f05f-4640-be2d-47e72a5d2bd4",
              "name": "Occupancy Rate",
              "value": "={{ $('Code').item.json['Occupancy Rate'] }}",
              "type": "string"
            },
            {
              "id": "bce2cc57-4297-452c-9312-abbdcb6f97c0",
              "name": "Projected Occupied Units",
              "value": "={{ $('Code').item.json['Projected Occupied Units'] }}",
              "type": "number"
            },
            {
              "id": "8dc817db-ccc2-4156-b942-7bb48d3ba1cd",
              "name": "Projected Occupancy Rate",
              "value": "={{ $('Code').item.json['Projected Occupancy Rate'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -620,
        -20
      ],
      "id": "27b551b3-def8-476d-ab87-59a926d6e1a0",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "value": "daily_data",
          "mode": "list",
          "cachedResultName": "daily_data"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "property_id",
        "valueToMatchOn": "={{ $json['Property ID'] }}",
        "valuesToSend": {
          "values": [
            {
              "column": "property_id",
              "value": "={{ $json['Property ID'] }}"
            },
            {
              "column": "property_name",
              "value": "={{ $json.Property }}"
            },
            {
              "column": "total_units",
              "value": "={{ $json[\"Total Units\"] }}"
            },
            {
              "column": "occupied_units",
              "value": "={{ $json[\"Occupied Units\"] }}"
            },
            {
              "column": "occupancy_rate",
              "value": "={{ $json[\"Occupancy Rate\"] }}"
            },
            {
              "column": "projected_occupied_units",
              "value": "={{ $json[\"Projected Occupied Units\"] }}"
            },
            {
              "column": "projected_occupancy_rate",
              "value": "={{ $json[\"Projected Occupancy Rate\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -400,
        -20
      ],
      "id": "96e25a09-03c3-45a6-b738-8b110564e8ac",
      "name": "MySQL1",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1600,
        -20
      ],
      "id": "76f81d7e-fbc1-4898-8982-0699cf7ee72d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "The last step completed is the code node. Need to create a field for Monthly total receipts. and match id to property name. \n"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -980,
        -280
      ],
      "id": "cd20105c-42d6-4dfa-ae20-49c5a0e1ca7d",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-03-18T03:17:20.000Z",
  "versionId": "ff38c983-77de-48b8-8b17-dc47a880d202"
}