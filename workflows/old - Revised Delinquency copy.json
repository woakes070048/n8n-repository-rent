{
  "active": false,
  "connections": {
    "Code (Aggregate Delinquency)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Aggregate Rent)": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code (Filter Delinquency Rows)": {
      "main": [
        [
          {
            "node": "Code (Aggregate Delinquency)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Filter Rent Rows)": {
      "main": [
        [
          {
            "node": "Code (Aggregate Rent)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Reports": {
      "main": [
        [
          {
            "node": "Update daily_data table",
            "type": "main",
            "index": 0
          },
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "FTP2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Send Email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code (Filter Delinquency Rows)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code (Filter Rent Rows)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Process Reports",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-24T01:39:19.887Z",
  "id": "J63MYbI08iW9sJQz",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "old - Revised Delinquency copy",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// 1) Get data from input\nlet allItems = $input.all();\nlet rows = allItems.map(item => item.json);\n\n// 2) Initialize an object to accumulate totals by property_id\nconst propertyMap = {};\n\n// 3) Loop through each row\nrows.forEach(row => {\n    // Convert property_id to integer if possible\n    if (row[\"property_id\"] !== undefined) {\n        const parsedPropId = parseInt(row[\"property_id\"], 10);\n        if (!isNaN(parsedPropId)) {\n            row[\"property_id\"] = parsedPropId;\n        }\n    }\n\n    // Parse numeric fields\n    if (row[\"total_receivable\"] !== undefined && row[\"total_receivable\"] !== null) {\n        row[\"total_receivable\"] = parseFloat(\n            row[\"total_receivable\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"total_receivable\"] = 0;\n    }\n\n    if (row[\"delinquent_rent\"] !== undefined && row[\"delinquent_rent\"] !== null) {\n        row[\"delinquent_rent\"] = parseFloat(\n            row[\"delinquent_rent\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"delinquent_rent\"] = 0;\n    }\n\n    if (row[\"delinquent_subsidy\"] !== undefined && row[\"delinquent_subsidy\"] !== null) {\n        row[\"delinquent_subsidy\"] = parseFloat(\n            row[\"delinquent_subsidy\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"delinquent_subsidy\"] = 0;\n    }\n\n    if (row[\"monthly_charges\"] !== undefined && row[\"monthly_charges\"] !== null) {\n        row[\"monthly_charges\"] = parseFloat(\n            row[\"monthly_charges\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"monthly_charges\"] = 0;\n    }\n\n    if (row[\"last_payment_amount\"] !== undefined && row[\"last_payment_amount\"] !== null) {\n        row[\"last_payment_amount\"] = parseFloat(\n            row[\"last_payment_amount\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"last_payment_amount\"] = 0;\n    }\n\n    if (row[\"monthly_rent\"] !== undefined && row[\"monthly_rent\"] !== null) {\n        row[\"monthly_rent\"] = parseFloat(\n            row[\"monthly_rent\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"monthly_rent\"] = 0;\n    }\n\n    if (row[\"delinquent_fees\"] !== undefined && row[\"delinquent_fees\"] !== null) {\n        row[\"delinquent_fees\"] = parseFloat(\n            row[\"delinquent_fees\"].toString().replace(/,/g, \"\")\n        ) || 0;\n    } else {\n        row[\"delinquent_fees\"] = 0;\n    }\n\n    // Now accumulate into propertyMap\n    const propId = row[\"property_id\"];\n    if (propId === undefined || isNaN(propId)) {\n        // Skip rows that don't have a valid numeric property ID\n        return;\n    }\n\n    // Initialize if we haven't seen this property yet\n    if (!propertyMap[propId]) {\n        propertyMap[propId] = {\n            property_id: propId,\n            total_receivable: 0,\n            delinquent_rent: 0,\n            delinquent_subsidy: 0,\n            monthly_charges: 0,\n            last_payment_amount: 0,\n            monthly_rent: 0,\n            delinquent_fees: 0\n        };\n    }\n\n    // Sum up numeric fields\n    propertyMap[propId].total_receivable += row.total_receivable;\n    propertyMap[propId].delinquent_rent += row.delinquent_rent;\n    propertyMap[propId].delinquent_subsidy += row.delinquent_subsidy;\n    propertyMap[propId].monthly_charges += row.monthly_charges;\n    propertyMap[propId].last_payment_amount += row.last_payment_amount;\n    propertyMap[propId].monthly_rent += row.monthly_rent;\n    propertyMap[propId].delinquent_fees += row.delinquent_fees;\n});\n\n// 4) Convert propertyMap back into an array, rounding to two decimals\nconst output = Object.values(propertyMap).map(item => {\n    // Round each numeric field to nearest hundredth (dollar format)\n    item.total_receivable = parseFloat(item.total_receivable.toFixed(2));\n    item.delinquent_rent = parseFloat(item.delinquent_rent.toFixed(2));\n    item.delinquent_subsidy = parseFloat(item.delinquent_subsidy.toFixed(2));\n    item.monthly_charges = parseFloat(item.monthly_charges.toFixed(2));\n    item.last_payment_amount = parseFloat(item.last_payment_amount.toFixed(2));\n    item.monthly_rent = parseFloat(item.monthly_rent.toFixed(2));\n    item.delinquent_fees = parseFloat(item.delinquent_fees.toFixed(2));\n\n    return { json: item };\n});\n\n// 5) Return final aggregated data (one item per property)\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        0
      ],
      "id": "f469a39a-1c8c-4fcc-a600-519f95003bca",
      "name": "Code (Aggregate Delinquency)"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        440,
        0
      ],
      "id": "4c709965-c39d-4f3c-bbc9-14c7e48837ef",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        440,
        180
      ],
      "id": "6ce327d4-f6c7-4e3c-8038-7b89e3c405a7",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "// Ensure input is an array\nif (!Array.isArray(items)) {\n    throw new Error(\"Input is not an array. Ensure the previous node outputs a JSON array.\");\n}\n\nlet rentTotals = {};\nlet propertyDetails = {}; // Store property details\n\n// Process each row\nitems.forEach(item => {\n    const row = item.json;\n\n    // property_id as integer\n    const numericPropertyId = parseInt(row[\"property_id\"], 10);\n\n    // rent as float\n    const parsedRent = parseFloat(row[\"rent\"] || 0);\n\n    // Accumulate\n    if (!isNaN(numericPropertyId) && !isNaN(parsedRent)) {\n        rentTotals[numericPropertyId] = (rentTotals[numericPropertyId] || 0) + parsedRent;\n    }\n\n    // Store property details (only if not already stored)\n    if (!propertyDetails[numericPropertyId]) {\n        propertyDetails[numericPropertyId] = {\n            property_name: row[\"property_name\"],\n            property_group_ids: row[\"property_group_ids\"]\n        };\n    }\n});\n\n// Build final array\nconst reportData = Object.keys(rentTotals).map(propIdString => {\n    const propIdNum = parseInt(propIdString, 10);\n    return {\n        property_id: propIdNum,\n        total_rent: parseFloat(rentTotals[propIdNum].toFixed(2)),\n        property_name: propertyDetails[propIdNum].property_name,\n        property_group_ids: propertyDetails[propIdNum].property_group_ids\n    };\n});\n\nreturn reportData.map(entry => ({ json: entry }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        180
      ],
      "id": "58cceda6-ec02-46ec-b2fd-f476ea862d84",
      "name": "Code (Aggregate Rent)"
    },
    {
      "parameters": {
        "jsCode": "// 1) Get all input items from the previous node\nconst allItems = $input.all();\n\n// 2) Flatten items into an array of row objects\nlet rows = allItems.map(item => item.json);\n\n// 3) Filter out rows where \"Property ID\" is blank or \"Total\" (original CSV logic)\n//    but now we renamed the field to property_id, so we filter on that.\n\nlet filtered = rows.filter(row => {\n  const rawId = row[\"property_id\"];\n  if (!rawId) {\n    // If property_id is undefined, null, or empty => remove\n    return false;\n  }\n\n  // Normalize to string & trim\n  const propId = String(rawId).trim().toLowerCase();\n\n  // Exclude if 'total' or empty\n  if (propId === \"total\" || propId === \"\") {\n    return false;\n  }\n\n  return true;\n});\n\n// 4) Return final\nreturn filtered.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        0
      ],
      "id": "bd08a4f9-fa5a-4cbb-983a-ae0af2b4d8a7",
      "name": "Code (Filter Delinquency Rows)"
    },
    {
      "parameters": {
        "jsCode": "// 1) Get all input items\nconst allItems = $input.all();\n\n// 2) Flatten into array\nlet rows = allItems.map(item => item.json);\n\n// 3) Filter out rows with property_id = 'total' or blank\nlet filtered = rows.filter(row => {\n  const rawId = row[\"property_id\"];\n  if (!rawId) {\n    return false;\n  }\n  const propId = String(rawId).trim().toLowerCase();\n  if (propId === \"total\" || propId === \"\") {\n    return false;\n  }\n  return true;\n});\n\n// Return final\nreturn filtered.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        180
      ],
      "id": "ab987755-c7ff-44af-bde7-47010fa349b0",
      "name": "Code (Filter Rent Rows)"
    },
    {
      "parameters": {
        "jsCode": "if (!Array.isArray($input.all())) {\n    throw new Error(\"Input is not an array. Ensure the previous node outputs a JSON array.\");\n}\n\nconst items = $input.all();\n\nconst output = items.map(item => {\n    const row = { ...item.json };\n\n    // Parse and default to 0\n    const totalRent = parseFloat(row[\"total_rent\"] || 0);\n    const delinquentRent = parseFloat(row[\"delinquent_rent\"] || 0);\n    const delinquentSubsidy = parseFloat(row[\"delinquent_subsidy\"] || 0);\n    const delinquentFees = parseFloat(row[\"delinquent_fees\"] || 0);\n\n    // Calculate totals\n    const totalDelinquent = delinquentRent + delinquentSubsidy + delinquentFees;\n    const totalReceivable = totalDelinquent;\n\n    // 1. Delinquency as a percentage of total_receivable\n    let percentOfReceivable = 0;\n    if (totalReceivable > 0 && totalRent > 0) {\n        percentOfReceivable = (totalReceivable / totalRent) * 100;\n    }\n    row[\"delinquency_percent_receivable\"] = parseFloat(percentOfReceivable.toFixed(2));\n\n    // 2. Delinquency as a percentage of total_rent only\n    let percentOfRentOnly = 0;\n    if (totalRent > 0) {\n        percentOfRentOnly = ((delinquentSubsidy + delinquentRent) / totalRent) * 100;\n    }\n    row[\"delinquency_percent_rent_only\"] = parseFloat(percentOfRentOnly.toFixed(2));\n\n    // 3. Delinquency as a percentage of total_rent without subsidies\n    const delinquentWithoutSubsidy = delinquentRent + delinquentFees;\n    let percentWithoutSubsidies = 0;\n    if (totalRent > 0) {\n        percentWithoutSubsidies = (delinquentWithoutSubsidy / totalRent) * 100;\n    }\n    row[\"delinquency_percent_no_subsidies\"] = parseFloat(percentWithoutSubsidies.toFixed(2));\n\n    return { json: row };\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        860,
        640
      ],
      "name": "Process Reports",
      "id": "bd5ec2ba-7a85-4d5c-8f4a-c220ed06b2ce"
    },
    {
      "parameters": {
        "jsCode": "const data = JSON.stringify($input.all().map(item => item.json), null, 2);\n\nreturn [\n  {\n    json: {},\n    binary: {\n      data: {\n        data: Buffer.from(data).toString('base64'),\n        mimeType: 'application/json',\n        fileName: 'delinquency.json'\n      }\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        600
      ],
      "id": "6f6264b4-bf9e-4bb4-accc-4b6b4fe73642",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "delinquency_performace.json",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1960,
        600
      ],
      "id": "31586f19-7340-499d-9e26-c9a4de82570a",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "upload",
        "path": "/public_html/data/delinquency.json"
      },
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        2180,
        600
      ],
      "id": "97b1343f-4234-4d1a-b2b8-29a11453eadf",
      "name": "FTP2",
      "credentials": {
        "ftp": {
          "id": "87ZwJT7N7b5rycj4",
          "name": "n8n Data FTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// If you only want certain property_ids to pass through, update the array.\n\nconst propertyIdsToSend = [\"689\", \"329\", \"690\", \"693\", \"330\", \"694\", \"695\", \"690\", \"691\"];\n\n// Keep items whose property_id matches\nconst filteredData = items.filter(item => {\n    return propertyIdsToSend.includes(String(item.json[\"property_id\"]));\n});\n\nreturn filteredData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        800
      ],
      "id": "f22a0823-f565-471b-bd1e-06f6d276802a",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "let emailBody = `\n    <h2>Delinquency Report</h2>\n    <p>This report details delinquency for the properties to date as a percentage of occupied units.</p>\n    <p>If a property is not represented, it either has no delinquency or no data available.</p>\n    <table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse;'>\n        <tr>\n            <th>Property Name</th>\n            <th>Total Rent</th>\n            <th>Total Delinquent</th>\n            <th>Delinquency % (Receivable)</th>\n            <th>Delinquency % (Rent Only)</th>\n            <th>Delinquency % (No Subsidies)</th>\n        </tr>`;\n\nitems.forEach(item => {\n    let row = item.json;\n\n    const propName = row.property_name || \"Unknown\";\n\n    let totalRent = parseFloat(row.total_rent || 0);\n    let totalDelinquent = parseFloat(row.delinquent_rent || 0) + parseFloat(row.delinquent_subsidy || 0) + parseFloat(row.delinquent_fees || 0);\n\n    let dpReceivable = row.delinquency_percent_receivable || \"0%\";\n    let dpRentOnly = row.delinquency_percent_rent_only || \"0%\";\n    let dpNoSubsidy = row.delinquency_percent_no_subsidies || \"0%\"; // Added this line\n\n    emailBody += `<tr>\n        <td>${propName}</td>\n        <td>$${totalRent.toLocaleString()}</td>\n        <td>$${totalDelinquent.toLocaleString()}</td>\n        <td>${dpReceivable}</td>\n        <td>${dpRentOnly}</td>\n        <td>${dpNoSubsidy}</td>\n    </tr>`;\n});\n\nemailBody += `</table>`;\n\nreturn [{ json: { emailBody } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        800
      ],
      "id": "47141072-8b51-46fd-9a89-489559b12e3a",
      "name": "Code4"
    },
    {
      "parameters": {
        "fromEmail": "reports@blzres.com",
        "toEmail": "brandon@blazeproperty.com",
        "subject": "Wally Daily Delinquency",
        "html": "={{ $json.emailBody }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2180,
        800
      ],
      "id": "1e812dd8-2684-47fb-a720-df1f9be5f3ef",
      "name": "Send Email",
      "webhookId": "33d3fec1-9277-42db-acbd-8910836a12cd",
      "credentials": {
        "smtp": {
          "id": "CT7TQcD1DuyTHPFu",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let emailBody = `\n    <h2>Delinquency Report</h2>\n    <p>This report details delinquency for the properties to date as a percentage of occupied units.</p>\n    <p>If a property is not represented, it either has no delinquency or no data available.</p>\n    <table border='1' cellpadding='5' cellspacing='0' style='border-collapse: collapse;'>\n        <tr>\n            <th>Property</th>\n            <th>Total Rent</th>\n            <th>Total Delinquent</th>\n            <th>Delinquency % (Receivable)</th>\n            <th>Delinquency % (Rent Only)</th>\n        </tr>`;\n\nitems.forEach(item => {\n    let row = item.json;\n\n    let totalRent = parseFloat(row.total_rent || 0);\n    let totalDelinquent = parseFloat(row.delinquent_rent || 0) + parseFloat(row.delinquent_fees || 0);\n\n    let dpReceivable = parseFloat(row.delinquency_percent_receivable || 0);\n    let dpRentOnly = parseFloat(row.delinquency_percent_rent_only || 0);\n\n    let delinquencyColor = \"black\";\n    if (dpReceivable > 10) {\n        delinquencyColor = \"red\";\n    } else if (dpReceivable >= 5) {\n        delinquencyColor = \"orange\";\n    } else {\n        delinquencyColor = \"green\";\n    }\n\n    let delinquentRentColor = (totalDelinquent > 5000) ? \"orange\" : \"black\";\n\n    // Add gold stars\n    let dpReceivableDisplay = dpReceivable.toFixed(2) + \"%\";\n    if (dpReceivable < 1) {\n        dpReceivableDisplay += \" ⭐\";\n    }\n\n    let dpRentOnlyDisplay = dpRentOnly.toFixed(2) + \"%\";\n    if (dpRentOnly < 1) {\n        dpRentOnlyDisplay += \" ⭐\";\n    }\n\n    emailBody += `<tr>\n        <td>${row.property_name || \"Unknown\"}</td>\n        <td>$${totalRent.toLocaleString()}</td>\n        <td style=\"color: ${delinquentRentColor};\">$${totalDelinquent.toLocaleString()}</td>\n        <td style=\"color: ${delinquencyColor};\">${dpReceivableDisplay}</td>\n        <td style=\"color: ${delinquencyColor};\">${dpRentOnlyDisplay}</td>\n    </tr>`;\n});\n\nemailBody += `</table>`;\n\nreturn [{ json: { emailBody } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        1000
      ],
      "id": "adcca1ce-9433-4739-b050-3eefa2abea23",
      "name": "Code6"
    },
    {
      "parameters": {
        "fromEmail": "reports@blzres.com",
        "toEmail": "brandon@blazeproperty.com",
        "subject": "Daily Delinquency Percentages",
        "html": "={{ $json.emailBody }}",
        "options": {
          "ccEmail": "brandon@blazeproperty.com"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2180,
        1000
      ],
      "id": "8fe46ede-8ac6-40c6-bb5e-3cef98794cbf",
      "name": "Send Email1",
      "webhookId": "a6b759f5-793d-4461-abc4-b2d39f0227bb",
      "credentials": {
        "smtp": {
          "id": "CT7TQcD1DuyTHPFu",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -320,
        120
      ],
      "id": "1096bab5-c6d2-4577-b249-81b0e08d3eaa",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b0ccc25-bcfc-45b3-8307-bbab4123577f",
              "name": "property_name",
              "value": "={{ $json['Property Name'] }}",
              "type": "string"
            },
            {
              "id": "590d33ae-e411-4fd1-8c7c-736ba25191f6",
              "name": "property_id",
              "value": "={{ $json['Property ID'] }}",
              "type": "number"
            },
            {
              "id": "7b7c50f8-0176-4b20-a7c6-877aa2e0d48e",
              "name": "tenant_name",
              "value": "={{ $json.Name }}",
              "type": "string"
            },
            {
              "id": "29c101c1-be29-4cb2-9b07-2fef2f95c383",
              "name": "total_receivable",
              "value": "={{ $json['Amount Receivable'] }}",
              "type": "number"
            },
            {
              "id": "f1fe084c-6797-4f29-8899-b755aaad5b74",
              "name": "delinquent_rent",
              "value": "={{ $json['Delinquent Rent'] }}",
              "type": "number"
            },
            {
              "id": "8971f5cb-c69c-46aa-beb3-7568c8ccea9b",
              "name": "delinquent_subsidy",
              "value": "={{ $json['Delinquent Subsidy Amount'] }}",
              "type": "number"
            },
            {
              "id": "8af9f118-97ce-438c-a0d6-c8bf04a0d480",
              "name": "nsf_count",
              "value": "={{ $json['NSF Count'] }}",
              "type": "number"
            },
            {
              "id": "7d7baeb7-fda5-4a73-bd43-06f09ac183f4",
              "name": "late_count",
              "value": "={{ $json['Late Count'] }}",
              "type": "number"
            },
            {
              "id": "48b3021a-8ebc-46fc-92ff-d28a129c7ed9",
              "name": "certified_funds_Only",
              "value": "={{ $json['Certified Funds Only'] }}",
              "type": "string"
            },
            {
              "id": "24aaf3dd-5503-4fd2-b213-b978b9212b51",
              "name": "monthly_charges",
              "value": "={{ $json['Monthly Charges'] }}",
              "type": "number"
            },
            {
              "id": "3a332067-b853-4e75-9424-5b0eb33c310d",
              "name": "last_payment_date",
              "value": "={{ $json['Last Payment'] }}",
              "type": "string"
            },
            {
              "id": "e67f1f98-1990-44bd-9ffa-0928eb9ec9f7",
              "name": "last_payment_amount",
              "value": "={{ $json['Payment Amount'] }}",
              "type": "string"
            },
            {
              "id": "9c810c01-9c09-4ad8-9987-b1c28e60dc87",
              "name": "monthly_rent",
              "value": "={{ $json.Rent }}",
              "type": "number"
            },
            {
              "id": "bda6e1d8-4d83-4b33-8c9d-7dbe3943599f",
              "name": "delinquent_fees",
              "value": "={{ $json['Amount Receivable'] - $json['Delinquent Rent'] - $json['Delinquent Subsidy Amount'] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        0
      ],
      "id": "b279b8be-1617-4293-b858-149491ef6833",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e4198c16-6507-4013-9d94-ce69fd5f9543",
              "name": "unit",
              "value": "={{ $json.Unit }}",
              "type": "string"
            },
            {
              "id": "ff8f304a-0e68-467f-bf20-e44b2e0d5d50",
              "name": "status",
              "value": "={{ $json.Status }}",
              "type": "string"
            },
            {
              "id": "f472f51c-aed4-45fa-9cda-54370a3135af",
              "name": "rent",
              "value": "={{ $json.Rent }}",
              "type": "number"
            },
            {
              "id": "45180fa2-5719-45c7-88e4-33541ac68e0a",
              "name": "property_name",
              "value": "={{ $json['Property Name'] }}",
              "type": "string"
            },
            {
              "id": "98c4536e-4859-4c2e-ac8d-f77e5a35987a",
              "name": "property_id",
              "value": "={{ $json['Property ID'] }}",
              "type": "number"
            },
            {
              "id": "19a25703-56b6-4801-95f2-8a435f88d2f2",
              "name": "property_group_ids",
              "value": "={{ $json['Property Group ID(s)'].split(',').map(item => parseInt(item.trim())) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        180
      ],
      "id": "91d1eb0b-fa75-416a-ad4c-b4b43d621c44",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a997f22e-ca2e-425d-9c74-104bd4e09317",
              "name": "property_id",
              "value": "={{ $json.property_id }}",
              "type": "number"
            },
            {
              "id": "89f6b8f3-0634-45ff-bbda-a232c930cfc7",
              "name": "total_receivable",
              "value": "={{ $json.total_receivable }}",
              "type": "number"
            },
            {
              "id": "d679fa71-c937-47d5-a778-453b32073296",
              "name": "delinquent_rent",
              "value": "={{ $json.delinquent_rent }}",
              "type": "number"
            },
            {
              "id": "9e6bd959-88c3-40a8-92b0-f8bf95e832ad",
              "name": "delinquent_subsidy",
              "value": "={{ $json.delinquent_subsidy }}",
              "type": "number"
            },
            {
              "id": "197b8592-1733-443a-a4f4-ad814ce2f0c4",
              "name": "monthly_charges",
              "value": "={{ $json.monthly_charges }}",
              "type": "number"
            },
            {
              "id": "2349272d-b2e3-490f-b732-f0d659e4ade7",
              "name": "last_payment_amount",
              "value": "={{ $json.last_payment_amount }}",
              "type": "number"
            },
            {
              "id": "adabe1f1-3f43-4568-9c48-cc5e365bcf0b",
              "name": "monthly_rent",
              "value": "={{ $json.monthly_rent }}",
              "type": "number"
            },
            {
              "id": "ae49b017-d2a3-4311-94b3-6fbd01b0376d",
              "name": "delinquent_fees",
              "value": "={{ $json.delinquent_fees }}",
              "type": "number"
            },
            {
              "id": "fc02fb19-126d-460e-9815-4df927d355a9",
              "name": "total_rent",
              "value": "={{ $json.total_rent }}",
              "type": "number"
            },
            {
              "id": "d27f5408-8d3d-416e-a3ab-0b8b395fade3",
              "name": "property_name",
              "value": "={{ $json.property_name }}",
              "type": "string"
            },
            {
              "id": "55349db1-a46f-4390-995e-cad7427cf1d2",
              "name": "property_group_ids",
              "value": "={{ $json.property_group_ids }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        640,
        620
      ],
      "name": "Edit Fields2",
      "id": "11ff505c-8b1b-4e57-96ed-ae977b27f207"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "property_id",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1320,
        180
      ],
      "id": "b0d05540-811e-4677-89fb-2eb82599a84a",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "value": "daily_data",
          "mode": "list",
          "cachedResultName": "daily_data"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "property_id",
        "valueToMatchOn": "={{ $json[\"property_id\"] }}",
        "valuesToSend": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.property_id }}"
            },
            {
              "column": "total_receivable",
              "value": "={{ $json.total_receivable }}"
            },
            {
              "column": "total_delinquent_rent",
              "value": "={{ $json.delinquent_rent }}"
            },
            {
              "column": "delinquent_subsidy",
              "value": "={{ $json.delinquent_subsidy }}"
            },
            {
              "column": "total_rent",
              "value": "={{ $json.total_rent }}"
            },
            {
              "column": "delinquency_percent_receivable",
              "value": "={{ $json.delinquency_percent_receivable }}"
            },
            {
              "column": "delinquency_percent_rent_only",
              "value": "={{ $json.delinquency_percent_rent_only }}"
            },
            {
              "column": "delinquency_percent_no_subsidies",
              "value": "={{ $json.delinquency_percent_no_subsidies }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1740,
        440
      ],
      "id": "0947c445-ef17-43d2-982d-c45712411008",
      "name": "Update daily_data table",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": {
          "__rl": true,
          "value": "property_directory",
          "mode": "list",
          "cachedResultName": "property_directory"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "property_id",
        "valueToMatchOn": "={{ $json.property_id }}",
        "valuesToSend": {
          "values": [
            {
              "column": "property_name",
              "value": "={{ $json.property_name }}"
            },
            {
              "column": "property_group_ids",
              "value": "={{ $json.property_group_ids }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        1740,
        260
      ],
      "id": "95c1823b-e719-474d-92b1-ea7061fa74eb",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "11IoC82gZCpsQN53mdLUPTy-zd5W0j10g",
          "mode": "list",
          "cachedResultName": "n8n Apartment Delinquency Daily.csv\n",
          "cachedResultUrl": "https://drive.google.com/file/d/11IoC82gZCpsQN53mdLUPTy-zd5W0j10g/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        40,
        0
      ],
      "id": "da97764d-f928-4cf7-a4b4-e07f84dbcf0c",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "cer2DAVMEta9v7Fb",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1Xk2iAoo0iQyCh5fTktPWYN9etCRP1BX3",
          "mode": "list",
          "cachedResultName": "n8n Apartment Rent Totals.csv\n",
          "cachedResultUrl": "https://drive.google.com/file/d/1Xk2iAoo0iQyCh5fTktPWYN9etCRP1BX3/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        40,
        200
      ],
      "id": "ed5411bf-1a79-487b-8a1a-92f77025b3d1",
      "name": "Google Drive1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "cer2DAVMEta9v7Fb",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "Etm1h3dHXQYzby5C"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-25T11:16:30.000Z",
  "versionId": "69e31f2c-20a6-4501-99aa-04ed5413bccc"
}