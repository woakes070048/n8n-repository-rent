{
  "active": false,
  "connections": {
    "Email Trigger (IMAP)": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Property",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "ParseReport",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Property": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ParseReport": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-03T22:15:26.827Z",
  "id": "8LInrAjcSRZUNBjA",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "GuestCard Report Daily Update",
  "nodes": [
    {
      "parameters": {
        "postProcessAction": "nothing",
        "format": "resolved",
        "options": {
          "customEmailConfig": "[\"UNSEEN\", [\"SUBJECT\", \"Guest Cards\"]]"
        }
      },
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [
        -1560,
        -80
      ],
      "id": "3d9e1421-2a98-472d-a0d9-d62b104e0aa8",
      "name": "Email Trigger (IMAP)",
      "credentials": {
        "imap": {
          "id": "rQhepyx6Tzc3cAyi",
          "name": "MIgadu blzres.net"
        }
      }
    },
    {
      "parameters": {
        "operation": "xls",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1340,
        -80
      ],
      "id": "8234b68e-1ee7-4600-bd4f-8fac412e37f8",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Get the email text from the incoming JSON.\n// Adjust if your email data is in a different field.\nconst emailText = $json.text || '';\n\nlet propertyValue = '';\n\n// Split the text into individual lines.\nconst lines = emailText.split('\\n');\n\n// Loop through the lines and look for one that starts with \"Property:\"\nfor (const line of lines) {\n  if (line.trim().startsWith('Property:')) {\n    // Remove \"Property:\" from the line and trim any extra whitespace.\n    propertyValue = line.replace('Property:', '').trim();\n    break; // Exit the loop once found.\n  }\n}\n\n// Return the extracted property value.\nreturn [{ json: { property: propertyValue } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1260,
        -280
      ],
      "id": "43d83cad-2900-4b85-bd03-27f3123f9abe",
      "name": "Get Property"
    },
    {
      "parameters": {
        "jsCode": "// Get all input rows\nconst allRows = $input.all();\n\n// Convert to an array of objects\nlet records = allRows.map(row => row.json);\n\n// Remove records with neither an email nor a phone number\nrecords = records.filter(row => (row[\"Email Address\"] && row[\"Email Address\"].trim() !== \"\") || \n                                (row[\"Phone Number\"] && row[\"Phone Number\"].trim() !== \"\"));\n\n// Create a set to track unique records using email if available, otherwise phone number\nconst uniqueContacts = new Set();\n\nrecords = records.filter(row => {\n    // Use email if available, otherwise use phone number as a unique identifier\n    let identifier = row[\"Email Address\"] && row[\"Email Address\"].trim() !== \"\" \n                     ? row[\"Email Address\"].trim()\n                     : row[\"Phone Number\"] && row[\"Phone Number\"].trim() !== \"\" \n                     ? row[\"Phone Number\"].trim()\n                     : null;\n\n    if (!identifier) {\n        return false; // If no identifier, discard the row\n    }\n\n    if (uniqueContacts.has(identifier)) {\n        return false; // Duplicate, remove it\n    }\n\n    uniqueContacts.add(identifier);\n    return true; // Unique, keep it\n});\n\n// Extract property name (assuming it's in the first row's \"Name\" field)\nconst propertyName = allRows[0]?.json[\"Name\"] || \"Unknown Property\";\n\n// Count the number of unique records\nconst uniqueCount = records.length;\n\n// Return final result\nreturn [\n    {\n        json: {\n            unique_contacts: uniqueCount\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -80
      ],
      "id": "898f7028-7aaf-4e0a-8d87-9fab0bfd8b12",
      "name": "ParseReport"
    },
    {
      "parameters": {
        "mode": "combineBySql"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -900,
        -100
      ],
      "id": "c2cf8ab2-07d3-4b02-a670-54920faff6a8",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "value": "rent_roll_totals",
          "mode": "list",
          "cachedResultName": "rent_roll_totals"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "property_name",
        "valueToMatchOn": "={{ $json.property }}",
        "valuesToSend": {
          "values": [
            {
              "column": "units",
              "value": "={{ $json.units }}"
            },
            {
              "column": "occupancy",
              "value": "={{ $json.occupancy }}"
            },
            {
              "column": "market_rent",
              "value": "={{ $json.market_rent }}"
            },
            {
              "column": "rent",
              "value": "={{ $json.rent }}"
            },
            {
              "column": "past_due",
              "value": "={{ $json.past_due }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -720,
        -100
      ],
      "id": "426a6c5b-c3bf-41ff-8500-862bc89d7504",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Email Trigger (IMAP)": {
      "lastMessageUid": 7
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-02-03T22:29:30.000Z",
  "versionId": "1cee4785-4078-47cc-b0d1-dd6b4955e5be"
}