{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "FTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FTP": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-21T12:27:52.509Z",
  "id": "KBEReU13fUbcolAy",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "update property directory sql table",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -600,
        0
      ],
      "id": "2af09e1e-76f7-4651-8cdb-9d47bdc5cfc9",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "path": "/public_html/data/property_directory.csv"
      },
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -380,
        0
      ],
      "id": "5a18cc14-90d2-4b1d-93c3-5f25a0db2367",
      "name": "FTP",
      "credentials": {
        "ftp": {
          "id": "87ZwJT7N7b5rycj4",
          "name": "n8n Data FTP account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -200,
        0
      ],
      "id": "cb81ddf4-b2d3-4f9f-9365-8147ae818416",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Function to convert camelCase, PascalCase, and spaces to snake_case\nconst toSnakeCase = (str) => {\n    return str\n        .replace(/([a-z])([A-Z])/g, '$1_$2') // Convert camelCase to snake_case\n        .replace(/\\s+/g, '_') // Replace spaces with underscores\n        .replace(/[^a-zA-Z0-9_]/g, '') // Remove non-alphanumeric characters (except underscores)\n        .toLowerCase();\n};\n\n// Ensure input data is available\nif (!Array.isArray($input.all())) {\n    throw new Error(\"Input is not an array. Ensure the previous node outputs a JSON array.\");\n}\n\nconst items = $input.all();\n\n// Process each record\nconst output = items\n    .map(item => {\n        const json = item.json;\n\n        // Convert field names to snake_case\n        const newJson = {};\n        for (const key in json) {\n            const snakeKey = toSnakeCase(key);\n            newJson[snakeKey] = json[key];\n        }\n\n        return { json: newJson };\n    })\n    .filter(item => {\n        // Convert the entire record to a lowercase string for case-insensitive checks\n        const recordString = JSON.stringify(item.json).toLowerCase().trim();\n\n        // Remove blank records or records containing \"total\"\n        return recordString.length > 0 && !recordString.includes(\"total\");\n    });\n\n// Return cleaned and formatted data\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -20,
        0
      ],
      "id": "ce155c67-8854-4e94-b590-616eb1ad0d95",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "value": "property_directory",
          "mode": "list",
          "cachedResultName": "property_directory"
        },
        "dataMode": "defineBelow",
        "columnToMatchOn": "property_id",
        "valueToMatchOn": "={{ $json.property_id }}",
        "valuesToSend": {
          "values": [
            {
              "column": "property",
              "value": "={{ $json.property }}"
            },
            {
              "column": "market_rent"
            },
            {
              "column": "units"
            },
            {
              "column": "sqft"
            },
            {
              "column": "management_flat_fee"
            },
            {
              "column": "management_fee_percent"
            },
            {
              "column": "minimum_fee"
            },
            {
              "column": "maximum_fee"
            },
            {
              "column": "reserve"
            },
            {
              "column": "home_warranty_expiration"
            },
            {
              "column": "insurance_expiration"
            },
            {
              "column": "tax_year_end"
            },
            {
              "column": "property_name"
            },
            {
              "column": "property_address"
            },
            {
              "column": "property_street_address_1"
            },
            {
              "column": "property_street_address_2"
            },
            {
              "column": "property_state"
            },
            {
              "column": "property_city"
            },
            {
              "column": "property_zip"
            },
            {
              "column": "property_county"
            },
            {
              "column": "vendor_1099_payer"
            },
            {
              "column": "portfolio"
            },
            {
              "column": "premium_status"
            },
            {
              "column": "maintenance_limit"
            },
            {
              "column": "management_fee_type"
            },
            {
              "column": "lease_fee_type"
            },
            {
              "column": "lease_flat_fee"
            },
            {
              "column": "lease_flat_fee"
            },
            {
              "column": "lease_fee_percent"
            },
            {
              "column": "owner_payment_type"
            },
            {
              "column": "property_type"
            },
            {
              "column": "property_created_on"
            },
            {
              "column": "property_created_by"
            },
            {
              "column": "late_fee_type"
            },
            {
              "column": "late_fee_base_amount"
            },
            {
              "column": "late_fee_daily_amount"
            },
            {
              "column": "grace_period"
            },
            {
              "column": "grace_period_fixed_day"
            },
            {
              "column": "grace_balance"
            },
            {
              "column": "max_daily_late_fees_amount"
            },
            {
              "column": "ignore_partial_payments"
            },
            {
              "column": "year_built"
            },
            {
              "column": "contract_expiration"
            },
            {
              "column": "management_start_date",
              "value": "={{ $json.management_start_date }}"
            },
            {
              "column": "property_integration_id",
              "value": "={{ $json.property_integration_id }}"
            },
            {
              "column": "property_group_ids",
              "value": "={{ $json.property_group_ids }}"
            },
            {
              "column": "portfolio_uuid",
              "value": "={{ $json.portfolio_uuid }}"
            },
            {
              "column": "visibility",
              "value": "={{ $json.visibility }}"
            },
            {
              "column": "renewal_fee_type",
              "value": "={{ $json.renewal_fee_type }}"
            },
            {
              "column": "renewal_flat_fee",
              "value": "={{ $json.renewal_flat_fee }}"
            },
            {
              "column": "renewal_fee_percent",
              "value": "={{ $json.renewal_fee_percent }}"
            },
            {
              "column": "prepayment_type",
              "value": "={{ $json.prepayment_type }}"
            },
            {
              "column": "listing_type",
              "value": "={{ $json.listing_type }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        200,
        0
      ],
      "id": "4035edc1-c0d1-4066-a4e7-c5b02b3fab07",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "OUIfR0k9k0YXHa0V",
          "name": "Blazedata Hostinger"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-21T13:42:16.000Z",
  "versionId": "45f89aee-c140-4a1e-9a99-06ea8db74b3b"
}