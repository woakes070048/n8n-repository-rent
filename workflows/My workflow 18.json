{
  "active": false,
  "connections": {
    "Watch Gmail": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Email": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Classify Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gmail labelling agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Gmail2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail2": {
      "main": [
        [
          {
            "node": "Gmail3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail - Read Labels1": {
      "ai_tool": [
        [
          {
            "node": "Gmail labelling agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Gmail - Get Message1": {
      "ai_tool": [
        [
          {
            "node": "Gmail labelling agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Gmail labelling agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Gmail labelling agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Gmail labelling agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Gmail labelling agent1": {
      "main": [
        [
          {
            "node": "Gmail4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail4": {
      "main": [
        [
          {
            "node": "Gmail5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-15T11:50:47.210Z",
  "id": "0ndf0MpEDZlqaF0U",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "My workflow 18",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "is:unread -category:promotions -category:social"
        },
        "options": {}
      },
      "id": "97dc6b4a-a3d7-43cc-aa9a-91ba0997d045",
      "name": "Watch Gmail",
      "type": "n8n-nodes-base.gmailTrigger",
      "position": [
        -720,
        -160
      ],
      "typeVersion": 1.2,
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Normalize subject and body\nconst subjectRaw = $json.subject || '';\nconst subject = subjectRaw.toLowerCase();\nconst body = ($json.text || '').toLowerCase();\n\n// Extract sender email\nconst fromRaw = $json.headers?.from || '';\nconst match = fromRaw.match(/<([^>]+)>/);\nconst fromEmail = match ? match[1].toLowerCase() : fromRaw.toLowerCase();\n\n// Label Map from previous node\nconst labelMap = $json.labelMap || {};\n\n// Defaults\nlet labelName = null;\nlet skipAI = false;\nlet removeInbox = false;\nlet preclassified = false;\n\n// Preclassification logic\nif (subject.includes('weekly guest cards') || subject.includes('report all')) {\n  labelName = 'SYS - AppFolio Reports';\n  skipAI = true;\n  preclassified = true;\n} else if (subject.includes('guest card')) {\n  labelName = 'LEAD - Guest Cards';\n  skipAI = true;\n  preclassified = true;\n} else if (subject.includes('application')) {\n  labelName = 'LEAD - Applications';\n  preclassified = true;\n  skipAI = true;\n} else if (fromEmail.includes('donotreply@appfolio.com')) {\n  if (subject.includes('report') || body.includes('report')) {\n    labelName = 'SYS - AppFolio Reports';\n  } else if (body.includes('vendor')) {\n    labelName = 'COMM - Vendor Notifications';\n  } else if (body.includes('owner')) {\n    labelName = 'COMM - Owner Communication';\n  } else if (body.includes('resident') || body.includes('tenant')) {\n    labelName = 'COMM - Tenant Communication';\n  } else if (body.includes('document')) {\n    labelName = 'DOC - Document Notices';\n  } else {\n    labelName = 'ADM - Internal Notices';\n  }\n  skipAI = true;\n  preclassified = true;\n} else if (subject.includes('maintenance')) {\n  labelName = 'OPS - Maintenance Requests';\n  preclassified = true;\n  skipAI = true;\n} else if (subject.includes('invoice')) {\n  labelName = 'OPS - Vendor Invoices';\n  preclassified = true;\n  skipAI = true;\n} else if (subject.includes('owner')) {\n  labelName = 'OWN - Statements & Requests';\n  preclassified = true;\n  skipAI = true;\n} else if (subject.includes('unsubscribe') || body.includes('unsubscribe')) {\n  labelName = '@Unsubscribe';\n  removeInbox = true;\n  preclassified = true;\n  skipAI = true;\n} else if (subject.includes('shipped') || subject.includes('order') || body.includes('tracking')) {\n  labelName = 'ORDERS - Shipping Notifications';\n  removeInbox = true;\n  preclassified = true;\n  skipAI = true;\n} else if (fromEmail.includes('n8n') || subject.includes('workflow failed')) {\n  labelName = 'SYS - Automation Logs';\n  preclassified = true;\n  skipAI = true;\n}\n\n// Get label ID from map (if found)\nconst labelId = labelName ? labelMap[labelName] || null : null;\n\n// Return structured output\nreturn [{\n  json: {\n    ...$json,\n    subjectRaw,\n    subjectNormalized: subject,\n    fromEmail,\n    labelName,\n    labelId,\n    skipAI,\n    preclassified,\n    removeInbox\n  }\n}];\n"
      },
      "name": "Classify Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -220,
        -140
      ],
      "id": "80106992-4b95-4862-afea-fea38d160748"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.preclassified }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "c6c19987-a3d9-4bcf-b594-9b8ef1d49075"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9a8b79b1-fccb-4bef-8ab2-8bd85c526614",
                    "leftValue": "={{ $json.preclassified }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -60,
        -160
      ],
      "id": "9022005d-0aad-4c88-a952-3d11211c8f97",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -560,
        -160
      ],
      "id": "b0a58851-96b5-4f47-aae6-718a09d1fdbf",
      "name": "Gmail1",
      "webhookId": "af1f1ccb-e89c-4a4b-894e-0e0485c4251b",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build labelMap from all label inputs\nconst labelMap = {};\n$input.all().forEach(item => {\n  const label = item.json;\n  if (label.type !== 'system') {\n    labelMap[label.name] = label.id;\n  }\n});\n\n// Get the first email item from prior node (like Classify Email)\nconst emailItem = $items(\"Watch Gmail\")[0].json;\n\n// Combine the original email info with the label map\nreturn [\n  {\n    json: {\n      ...emailItem,\n      labelMap\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        -160
      ],
      "id": "c27ce01e-33a3-4ba8-a351-99efce1b1205",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        160,
        -260
      ],
      "id": "43639cbc-b2d7-49e8-8acf-3d9809627c56",
      "name": "Gmail",
      "webhookId": "785bfc73-e3b4-493e-98d1-b34cc3f305d0",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "addLabels",
        "threadId": "={{ $json.id }}",
        "labelIds": "={{ $('Switch').item.json.labelId }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        340,
        -260
      ],
      "id": "7d17c290-cf4a-4126-801b-296acc80dc7e",
      "name": "Gmail2",
      "webhookId": "3fd91fff-2cd0-4013-80fd-383713c4dc8f",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "removeLabels",
        "threadId": "={{ $('Gmail').item.json.id }}",
        "labelIds": [
          "INBOX"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        560,
        -260
      ],
      "id": "d000cd3c-bffb-478a-9762-19a9e3001ceb",
      "name": "Gmail3",
      "webhookId": "323a5b17-7d48-4b8a-8030-17feee11820d",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Tool to read all existing gmail labels",
        "resource": "label",
        "returnAll": true
      },
      "id": "1dcb0c46-9bbc-417b-8c29-4ebda5f5f9d1",
      "name": "Gmail - Read Labels1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        280,
        200
      ],
      "typeVersion": 2.1,
      "webhookId": "2c503f93-308d-4384-9a29-812166acbf93",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Tool to read a specific message based on the message ID",
        "operation": "get",
        "messageId": "={{ $('Switch').item.json.id }}"
      },
      "id": "b5fcc2ad-97e4-4deb-a03a-ba3e00525d25",
      "name": "Gmail - Get Message1",
      "type": "n8n-nodes-base.gmailTool",
      "position": [
        420,
        200
      ],
      "typeVersion": 2.1,
      "webhookId": "441633c5-5ef3-44c0-b82f-611acfb77cc5",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an assistant to a real estate broker and property manager and are assigned the task of classifying emails by label. Label the email based on the details below:\nfrom: {{ $json.headers.from }}\nsubject: {{ $json.headers.subject }}\ntext: {{ $json.text }}\ngmail message id: {{ $json.id }}\nLabel IDs: {{ $json.labelIds }}\nto: {{ $json.headers.to }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Objective:  \nClassify and summarize incoming emails for Blaze Real Estate.  \nYou are the primary labeling agent and must assign the correct Gmail label and generate a professional summary for each message.  \nYou do not have knowledge of or access to any preclassification logic.\n\n🧰 Tools:  \nget message  \nread labels  \ncreate label  \nassign label to message\n\n🏷️ Label Rules:  \nUse context in subject, sender, and body to apply the correct label.  \nAvailable options include but are not limited to:\n\n\"COMM - Tenant Communication\"  \n\"COMM - Vendor Notifications\"  \n...  \n\"@Unsubscribe\"  \n\"Urgent\" (use if immediate action is implied)  \n\"Personal\" (use if the email is not work-related or clearly about health/personal matters)  \n\"Review Later\" (use only if no other label applies)\n\n**You must return both the Gmail label name and its corresponding Gmail label ID using the `labelMap` object passed into the prompt. Use the exact match of the label name to retrieve its ID. If no label applies, use \"Review Later\". If the label name is not found in the map, set the label ID to null.**\n",
          "maxIterations": 10
        }
      },
      "id": "e7a55260-231d-45b6-b35a-929ea2b12d54",
      "name": "Gmail labelling agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        240,
        0
      ],
      "notesInFlow": true,
      "retryOnFail": false,
      "typeVersion": 1.7,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -20,
        180
      ],
      "id": "8b4bc909-cd2d-4d1c-83ed-145436692940",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "Navm9hDUnjwpRcbB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.id || $json.messageId || 'default-session' }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        120,
        180
      ],
      "id": "e5f5e721-362f-4e02-8b5e-3a313dadc7ae",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"gmail_message_id\": \"MESSAGE_ID\",\n  \"gmail_label_name\": \"LABEL NAME\",\n  \"gmail_label_id\": \"LABEL_ID\",\n  \"summary\": \"Short summary for a property manager (1–3 sentences)\",\n  \"remove_inbox\": true,\n  \"skip\": false\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        760,
        200
      ],
      "id": "bc16b8e8-60c1-49c9-81ab-f25450e14ae6",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $json.output.gmail_message_id }}",
        "labelIds": "={{ $json.output.gmail_label_id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        600,
        -100
      ],
      "id": "3fdfeada-bc5b-4190-a39f-0dc040e68496",
      "name": "Gmail4",
      "webhookId": "6f82694d-213d-47c2-82f9-da5c027d6434",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "removeLabels",
        "messageId": "={{ $json.id }}",
        "labelIds": "={{ $json.labelIds[2] }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        820,
        -100
      ],
      "id": "62eb616a-19b0-451b-81e5-8a038264d6da",
      "name": "Gmail5",
      "webhookId": "26f2dde1-45fb-403d-9fff-167cc6bce9a7",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Watch Gmail": {
      "Watch Gmail": {
        "lastTimeChecked": 1744743911,
        "possibleDuplicates": [
          "1963ad78991681f0"
        ]
      }
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-15T19:08:55.000Z",
  "versionId": "0674611d-d35f-40f8-a15a-02545bb9b5e2"
}