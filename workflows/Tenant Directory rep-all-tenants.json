{
  "active": false,
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Record Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Update Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Baserow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Record Baserow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-08T16:57:01.428Z",
  "id": "yFFXzpspPf2wdzOL",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Tenant Directory rep-all-tenants",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "has:attachment rep-all-tenants"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -1320,
        360
      ],
      "id": "672f648f-810c-4e00-aaea-4b0ba751bcc3",
      "name": "Gmail Trigger",
      "notesInFlow": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      },
      "notes": "Get Owner Directory rep-owners email\n"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1100,
        360
      ],
      "id": "5a1bef1b-ea86-40c5-a941-3597a0214262",
      "name": "Extract from File",
      "notesInFlow": true,
      "notes": "Extract Attached File"
    },
    {
      "parameters": {
        "jsCode": "// Convert Excel date number to ISO string\nfunction excelDateToISO(excelDate) {\n  const parsed = parseFloat(excelDate);\n  if (!excelDate || isNaN(parsed)) return null;\n  const jsDate = new Date((parsed - 25569) * 86400 * 1000);\n  return jsDate.toISOString().split(\"T\")[0];\n}\n\n// Better phone number normalization\nfunction normalizePhone(phone) {\n  if (!phone) return '';\n  const digits = phone.replace(/\\D/g, '');\n  return digits.length >= 10 ? digits.slice(0, 10) : digits;\n}\n\n// Normalize email to first in list\nfunction normalizeEmail(email) {\n  if (!email) return '';\n  return email.split(/[ ,;]/)[0].trim();\n}\n\n// Clean input rows\nconst cleanedItems = items.filter(item => {\n  const values = Object.values(item.json);\n  const allBlank = values.every(val => !val || val.toString().trim() === '');\n  const isTotalRow = values.some(val => val.toString().toLowerCase().includes('total'));\n  return !allBlank && !isTotalRow;\n});\n\nreturn cleanedItems.map(item => {\n  const row = item.json;\n  const result = {};\n\n  for (const [key, value] of Object.entries(row)) {\n    if (key === \"Phone Numbers\") {\n      result[key] = normalizePhone(value);\n    } else if (key.toLowerCase().includes(\"email\")) {\n      result[key] = normalizeEmail(value);\n    } else if ([\n      \"Move-in\", \"Lease From\", \"Lease To\", \"Last Lease Renewal\", \"Move-out\",\n      \"Eligible for Rent Increase\", \"Last Rent Increase\", \"Next Rent Increase Date\",\n      \"Tenant Birthdate\"\n    ].includes(key)) {\n      result[key] = excelDateToISO(value);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return { json: result };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        360
      ],
      "id": "968a99b8-4feb-4776-81dc-9ff955ae8b1b",
      "name": "Code",
      "notesInFlow": true,
      "notes": "Normalize the data fields"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -660,
        350
      ],
      "id": "99a80fd3-4b47-45cd-b51b-bbbe067ca1be",
      "name": "Loop Over Items",
      "notesInFlow": true,
      "notes": "Loop for records check"
    },
    {
      "parameters": {
        "url": "=https://base.blazeproperty.com/api/database/rows/table/687/?user_field_names=true&filter__Tenant ID__equal={{ $json[\"Tenant ID\"] }}\n",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token bUQCUSlF5KA25RihIa0TmWPX6AIE0i0s"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        360
      ],
      "id": "01e4ff6e-9dee-45a6-9e25-38f82c2831d7",
      "name": "HTTP Request",
      "notesInFlow": true,
      "notes": "pull 1 records"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3640e37b-1339-4284-a6cf-8cbcb7c20317",
              "leftValue": "={{ $json.count > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        100
      ],
      "id": "c2ddc196-3fb4-486f-a7e8-6b66156995db",
      "name": "If",
      "notesInFlow": true,
      "notes": "Is the record present based on filter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ff3aaf68-2b36-4c11-ba86-badfec4587de",
              "name": "row",
              "value": "={{ $json.results[0].id }}",
              "type": "number"
            },
            {
              "id": "835a6c7d-0d13-4e78-a238-3f43a5d81cd6",
              "name": "Last Update",
              "value": "={{ new Date().toISOString().split('T')[0] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ],
      "id": "6f05a4e0-043d-4c44-a73a-e360a9e3a7da",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "# n8n Workflow: Owner Directory rep-owners\n\nThis workflow automates the import and update of owner records in Baserow based on attached Excel reports received via Gmail.\n",
        "height": 240,
        "width": 660
      },
      "id": "eaa16707-03c3-44c4-bf0c-9bfe993e8341",
      "name": "Sticky ## Gmail Trigger\nTri",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1940,
        -480
      ]
    },
    {
      "parameters": {
        "content": "## Loop Over Items\nProcesses each normalized item individually.",
        "height": 360
      },
      "id": "f0321498-7ef6-4bb0-b529-c033283ac36f",
      "name": "Sticky ## Extract from File",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -730,
        150
      ]
    },
    {
      "parameters": {
        "content": "## Gmail Trigger\nTriggers on new emails every minute that have attachments and include 'rep-owners' in the subject.",
        "height": 360
      },
      "id": "26606f9d-c6ab-4920-a66b-73a866d3da78",
      "name": "Sticky ## Code\nNormalizes t",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1390,
        150
      ]
    },
    {
      "parameters": {
        "content": "## Code\nNormalizes the extracted data:\n  - Converts Excel dates to YYYY-MM-DD\n  - Strips non-digit characters from phone numbers\n  - Extracts and formats fields.",
        "height": 460,
        "width": 190
      },
      "id": "d6653fca-8237-4bc5-95f7-887455a88b14",
      "name": "Sticky ## Loop Over Items\nP",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -925,
        50
      ]
    },
    {
      "parameters": {
        "content": "## Extract from File\nParses the attached XLSX file to extract raw data.\n",
        "height": 360
      },
      "id": "073b89a9-d37f-428e-97d7-5c48f4e80768",
      "name": "Sticky ## HTTP Request\nChec",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1170,
        150
      ]
    },
    {
      "parameters": {
        "content": "## If\nDetermines if the record exists (`count > 0`).",
        "height": 280,
        "width": 220
      },
      "id": "e5a8d2a7-6021-4a81-a114-6f2141189c84",
      "name": "Sticky ## If\nDetermines if ",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -280,
        -20
      ]
    },
    {
      "parameters": {
        "content": "\n## Baserow3\nCreates a new record in Baserow if no match was found.",
        "height": 380,
        "width": 260
      },
      "id": "43192b0f-15a7-4361-9a8e-1f3e9d1b65ab",
      "name": "Sticky ## Edit Fields\nExtra",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        240
      ]
    },
    {
      "parameters": {
        "content": "## Edit Fields\nExtracts the Baserow `row_id` for existing records to prepare for update.",
        "height": 320
      },
      "id": "070d95dc-687f-45d5-97af-2ce28b34d620",
      "name": "Sticky ## Baserow\nUpdates t",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -70,
        -160
      ]
    },
    {
      "parameters": {
        "content": "## HTTP Request\nChecks if the record already exists in Baserow by matching the `owner_id` using Baserow's API.",
        "height": 620
      },
      "id": "2e68c464-268e-46a9-a9b6-369579d0597d",
      "name": "Sticky ## Baserow3\nCreates ",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -510,
        -360
      ]
    },
    {
      "parameters": {
        "content": "## Baserow\nUpdates the existing record in Baserow using the extracted `row_id`.",
        "height": 300
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        150,
        35
      ],
      "id": "d43690c8-2b30-4ea9-840b-c59ef48cede6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 130,
        "tableId": 687,
        "rowId": "={{ $json.row }}",
        "dataToSend": "autoMapInputData"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        240,
        120
      ],
      "id": "2ea3533e-9df2-435f-9caa-d86436584fea",
      "name": "Update Baserow",
      "notesInFlow": true,
      "credentials": {
        "baserowApi": {
          "id": "5zW4AD0Cpmzo8h8d",
          "name": "Baserow account"
        }
      },
      "notes": "Update Record"
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 130,
        "tableId": 687,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 6838,
              "fieldValue": "={{ $('Loop Over Items').item.json.Tenant }}"
            },
            {
              "fieldId": 6839,
              "fieldValue": "={{ $('Loop Over Items').item.json.Status }}"
            },
            {
              "fieldId": 6840,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Tenant Type\"] }}"
            },
            {
              "fieldId": 6841,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Phone Numbers\"] }}"
            },
            {
              "fieldId": 6843,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Move-in\"] }}"
            },
            {
              "fieldId": 6837,
              "fieldValue": "={{ $('Loop Over Items').item.json.Unit }}"
            },
            {
              "fieldId": 6896,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Tenant ID\"] }}"
            },
            {
              "fieldId": 6842,
              "fieldValue": "={{ $('Loop Over Items').item.json.Emails }}"
            },
            {
              "fieldId": 6836,
              "fieldValue": "={{ $('Loop Over Items').item.json.Property }}"
            },
            {
              "fieldId": 6845,
              "fieldValue": "={{ $('Loop Over Items').item.json.Rent }}"
            },
            {
              "fieldId": 6846,
              "fieldValue": "={{ $('Loop Over Items').item.json.Deposit }}"
            },
            {
              "fieldId": 6864,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Lease From\"] }}"
            },
            {
              "fieldId": 6844,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Lease To\"] }}"
            },
            {
              "fieldId": 6856,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Property ID\"] }}"
            },
            {
              "fieldId": 6895,
              "fieldValue": "={{ $('Loop Over Items').item.json[\"Unit ID\"] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        60,
        360
      ],
      "id": "8ec8c365-0a03-41aa-882d-685bc23cd9f2",
      "name": "Create Record Baserow",
      "notesInFlow": true,
      "credentials": {
        "baserowApi": {
          "id": "5zW4AD0Cpmzo8h8d",
          "name": "Baserow account"
        }
      },
      "notes": "Add record"
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('Gmail Trigger').item.json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -920,
        560
      ],
      "id": "79453d57-72e2-4676-b222-0f8e0c018b91",
      "name": "Gmail",
      "webhookId": "9c965658-0cb8-481f-b881-7f2502664f6f",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "resource": "thread",
        "operation": "trash",
        "threadId": "={{ $('Gmail Trigger').item.json.threadId }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -700,
        560
      ],
      "id": "50f0949a-42a4-4b21-ac88-b8e4af1a061d",
      "name": "Gmail1",
      "webhookId": "f8c724ae-d3a8-4fdf-b17d-2ac892cd4823",
      "credentials": {
        "gmailOAuth2": {
          "id": "LD5x69eYRRI6cdrn",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Gmail Trigger": {
      "Gmail Trigger": {
        "lastTimeChecked": 1744130767
      }
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-04-09T12:30:55.000Z",
  "versionId": "cdd86b03-9456-484f-8102-325b8ec34d24"
}